// Frontend-only –≤–µ—Ä—Å–∏—è –¥–ª—è Netlify (–±–µ–∑ backend)
// Admin functionality
let isAdminMode = false;
let nextCardId = 7;
let nextWorkId = 5;
let nextLogoId = 6;

// Check for admin access
const urlParams = new URLSearchParams(window.location.search);
if (urlParams.get('admin') === 'true') {
    document.getElementById('adminPanel').style.display = 'block';
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏–Ω–Ω–µ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
function showLoading(show = true) {
    const spinner = document.getElementById('loadingSpinner');
    spinner.style.display = show ? 'block' : 'none';
}

function toggleAdminMode() {
    isAdminMode = !isAdminMode;
    document.body.classList.toggle('admin-mode', isAdminMode);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
    const toggleBtn = document.querySelector('.admin-toggle');
    if (isAdminMode) {
        toggleBtn.textContent = '‚úèÔ∏è –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–í–ö–õ)';
        toggleBtn.style.background = 'linear-gradient(135deg, #22c55e, #16a34a)';
    } else {
        toggleBtn.textContent = 'üëÅÔ∏è –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–í–´–ö–õ)';
        toggleBtn.style.background = 'linear-gradient(135deg, var(--accent), var(--accent2))';
    }
    
    // Enable/disable content editing
    const editables = document.querySelectorAll('.editable');
    editables.forEach(el => {
        el.contentEditable = isAdminMode;
    });
    
    updateCarousels();
}

// Frontend-only –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–∂–∞—Ç–∏–µ–º
function uploadImageLocal(file) {
    return new Promise((resolve, reject) => {
        if (!file || !file.type.startsWith('image/')) {
            reject(new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞'));
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
        if (file.size > 5 * 1024 * 1024) {
            reject(new Error('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º 5MB.'));
            return;
        }
        
        const img = new Image();
        img.onload = function() {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            const maxWidth = 800;
            const maxHeight = 600;
            
            let { width, height } = img;
            
            // –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
            if (width > maxWidth || height > maxHeight) {
                const ratio = Math.min(maxWidth / width, maxHeight / height);
                width *= ratio;
                height *= ratio;
            }
            
            canvas.width = width;
            canvas.height = height;
            
            // –†–∏—Å—É–µ–º —Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            ctx.drawImage(img, 0, 0, width, height);
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Data URL —Å —Å–∂–∞—Ç–∏–µ–º
            const dataUrl = canvas.toDataURL('image/jpeg', 0.7); // 70% –∫–∞—á–µ—Å—Ç–≤–æ
            
            console.log(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∂–∞—Ç–æ: ${file.size} ‚Üí ${Math.round(dataUrl.length * 0.75)} –±–∞–π—Ç`);
            resolve(dataUrl);
        };
        
        img.onerror = function() {
            reject(new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'));
        };
        
        const reader = new FileReader();
        reader.onload = function(e) {
            img.src = e.target.result;
        };
        reader.onerror = function() {
            reject(new Error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞'));
        };
        reader.readAsDataURL(file);
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ localStorage
function checkStorageSize() {
    let totalSize = 0;
    for (let key in localStorage) {
        if (localStorage.hasOwnProperty(key)) {
            totalSize += localStorage[key].length;
        }
    }
    
    const sizeInMB = (totalSize / 1024 / 1024).toFixed(2);
    const maxSizeApprox = 5; // –ü—Ä–∏–º–µ—Ä–Ω–æ 5MB –ª–∏–º–∏—Ç –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ –±—Ä–∞—É–∑–µ—Ä–æ–≤
    
    return {
        currentSize: totalSize,
        sizeInMB: parseFloat(sizeInMB),
        maxSizeApprox: maxSizeApprox,
        isNearLimit: parseFloat(sizeInMB) > maxSizeApprox * 0.8
    };
}

// –û—á–∏—Å—Ç–∫–∞ localStorage
function clearAllData() {
    const confirmation = confirm(
        '‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!\n\n' +
        '–≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n' +
        '‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n' +
        '‚Ä¢ –¢–µ–∫—Å—Ç—ã –∏ —Å—Å—ã–ª–∫–∏\n' +
        '‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤\n\n' +
        '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—á–∏—Å—Ç–∫—É?'
    );
    
    if (confirmation) {
        localStorage.removeItem('nikadesigner_content');
        alert('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!\n\n–û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é.');
        location.reload();
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑–º–µ—Ä–∞
function saveAllChanges() {
    showLoading(true);
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä
        const storageInfo = checkStorageSize();
        
        if (storageInfo.isNearLimit) {
            const proceed = confirm(
                `‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: localStorage –ø–æ—á—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω!\n\n` +
                `–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: ${storageInfo.sizeInMB} MB\n` +
                `–õ–∏–º–∏—Ç –±—Ä–∞—É–∑–µ—Ä–∞: ~${storageInfo.maxSizeApprox} MB\n\n` +
                `–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:\n` +
                `‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—å—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n` +
                `‚Ä¢ –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n` +
                `–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ?`
            );
            
            if (!proceed) {
                showLoading(false);
                return;
            }
        }
        
        const contentData = {
            editableContent: Array.from(document.querySelectorAll('.editable')).map(el => ({
                selector: getElementSelector(el),
                content: el.innerHTML
            })),
            aboutPhoto: document.querySelector('.about-photo img').src,
            bizcards: Array.from(document.querySelectorAll('.bizcard')).map((card, index) => ({
                id: `biz${index + 1}`,
                src: card.querySelector('img').src,
                alt: card.querySelector('img').alt
            })),
            workcards: Array.from(document.querySelectorAll('.work-card')).map((card, index) => ({
                id: `work${index + 1}`,
                src: card.querySelector('img').src,
                alt: card.querySelector('img').alt,
                title: card.querySelector('.work-title').textContent,
                description: card.querySelector('.work-description').textContent,
                link: card.querySelector('.work-btn').href
            })),
            logocards: Array.from(document.querySelectorAll('.logo-card')).map((card, index) => ({
                id: `logo${index + 1}`,
                src: card.querySelector('img').src,
                alt: card.querySelector('img').alt,
                text: card.querySelector('.logo-text').textContent
            })),
            timestamp: new Date().toISOString()
        };
        
        // –ü—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
        const dataString = JSON.stringify(contentData);
        const dataSizeMB = (dataString.length / 1024 / 1024).toFixed(2);
        
        console.log(`–†–∞–∑–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—è–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${dataSizeMB} MB`);
        
        localStorage.setItem('nikadesigner_content', dataString);
        
        const finalStorageInfo = checkStorageSize();
        
        setTimeout(() => {
            showLoading(false);
            alert(
                '‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n' + 
                `–í—Ä–µ–º—è: ${new Date().toLocaleString()}\n` +
                `–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ${dataSizeMB} MB\n` +
                `–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä localStorage: ${finalStorageInfo.sizeInMB} MB\n\n` +
                '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ª–æ–∫–∞–ª—å–Ω–æ.'
            );
        }, 1000);
        
    } catch (error) {
        showLoading(false);
        
        if (error.name === 'QuotaExceededError' || error.message.includes('quota')) {
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
            const storageInfo = checkStorageSize();
            alert(
                '‚ùå –û–®–ò–ë–ö–ê: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞!\n\n' +
                `localStorage –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω:\n` +
                `‚Ä¢ –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: ${storageInfo.sizeInMB} MB\n` +
                `‚Ä¢ –õ–∏–º–∏—Ç –±—Ä–∞—É–∑–µ—Ä–∞: ~${storageInfo.maxSizeApprox} MB\n\n` +
                `–†–µ—à–µ–Ω–∏—è:\n` +
                `1. –£–¥–∞–ª–∏—Ç–µ –ª–∏—à–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n` +
                `2. –û—á–∏—Å—Ç–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–æ–π "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å"\n` +
                `3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞\n\n` +
                `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏.`
            );
        } else {
            alert('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + error.message);
        }
        
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage
function loadSavedContent() {
    try {
        const savedData = localStorage.getItem('nikadesigner_content');
        if (savedData) {
            const data = JSON.parse(savedData);
            console.log('–ó–∞–≥—Ä—É–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:', data.timestamp);
            restoreContent(data);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
    }
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
function restoreContent(data) {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç—ã
    if (data.editableContent) {
        data.editableContent.forEach(item => {
            const element = document.querySelector(item.selector);
            if (element) {
                element.innerHTML = item.content;
            }
        });
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ç–æ "–û–±–æ –º–Ω–µ"
    if (data.aboutPhoto) {
        const aboutImg = document.querySelector('.about-photo img');
        if (aboutImg) {
            aboutImg.src = data.aboutPhoto;
        }
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–∑–∏—Ç–∫–∏
    if (data.bizcards) {
        const biztrack = document.getElementById('biztrack');
        const addCard = document.getElementById('addCard');
        
        const oldCards = biztrack.querySelectorAll('.bizcard');
        oldCards.forEach(card => card.remove());
        
        data.bizcards.forEach(cardData => {
            const newCard = document.createElement('div');
            newCard.className = 'bizcard';
            newCard.setAttribute('data-modal', cardData.id);
            
            const img = document.createElement('img');
            img.src = cardData.src;
            img.alt = cardData.alt;
            
            newCard.appendChild(img);
            biztrack.insertBefore(newCard, addCard);
        });
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—ã
    if (data.workcards) {
        const workstrack = document.getElementById('workstrack');
        const addWorkCard = document.getElementById('addWorkCard');
        
        const oldWorkCards = workstrack.querySelectorAll('.work-card');
        oldWorkCards.forEach(card => card.remove());
        
        data.workcards.forEach(workData => {
            const newCard = document.createElement('div');
            newCard.className = 'work-card tilt';
            
            const img = document.createElement('img');
            img.src = workData.src;
            img.alt = workData.alt;
            
            const content = document.createElement('div');
            content.className = 'work-content';
            
            // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
            const title = document.createElement('h3');
            title.className = 'work-title editable';
            title.contentEditable = isAdminMode;
            title.textContent = workData.title;
            
            const description = document.createElement('p');
            description.className = 'work-description editable';
            description.contentEditable = isAdminMode;
            description.textContent = workData.description;
            
            const workBtn = document.createElement('a');
            workBtn.className = 'work-btn';
            workBtn.textContent = '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç';
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            const linkUrl = workData.link || '#';
            workBtn.href = linkUrl;
            
            console.log('–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞:', workData.title, 'URL:', linkUrl);
            
            // –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è –∏ –Ω–µ "#", –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
            if (linkUrl && linkUrl !== '#' && linkUrl !== window.location.href + '#' && linkUrl !== window.location.href) {
                workBtn.target = '_blank';
                workBtn.rel = 'noopener noreferrer';
                console.log('–°—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è:', workData.title);
            } else {
                console.log('–ü—É—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è:', workData.title);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –≤ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–µ
            if (isAdminMode) {
                workBtn.addEventListener('click', handleWorkLinkEdit);
            }
            
            content.appendChild(title);
            content.appendChild(description);
            content.appendChild(workBtn);
            
            newCard.appendChild(img);
            newCard.appendChild(content);
            workstrack.insertBefore(newCard, addWorkCard);
        });
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø—ã
    if (data.logocards) {
        const logostrack = document.getElementById('logostrack');
        const addLogoCard = document.getElementById('addLogoCard');
        
        const oldLogoCards = logostrack.querySelectorAll('.logo-card');
        oldLogoCards.forEach(card => card.remove());
        
        data.logocards.forEach(logoData => {
            const newCard = document.createElement('div');
            newCard.className = 'logo-card';
            
            const imageDiv = document.createElement('div');
            imageDiv.className = 'logo-image';
            
            const img = document.createElement('img');
            img.src = logoData.src;
            img.alt = logoData.alt;
            
            const textDiv = document.createElement('div');
            textDiv.className = 'logo-text editable';
            textDiv.contentEditable = isAdminMode;
            textDiv.textContent = logoData.text;
            
            imageDiv.appendChild(img);
            newCard.appendChild(imageDiv);
            newCard.appendChild(textDiv);
            logostrack.insertBefore(newCard, addLogoCard);
        });
    }
    
    updateCarousels();
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
function getElementSelector(element) {
    if (element.id) {
        return '#' + element.id;
    }
    
    let selector = element.tagName.toLowerCase();
    
    if (element.className) {
        selector += '.' + element.className.split(' ').join('.');
    }
    
    const parent = element.parentNode;
    if (parent) {
        const siblings = Array.from(parent.children).filter(child => 
            child.tagName === element.tagName && 
            child.className === element.className
        );
        
        if (siblings.length > 1) {
            const index = siblings.indexOf(element);
            selector += `:nth-of-type(${index + 1})`;
        }
    }
    
    return selector;
}

function updateCarousels() {
    bizcards = document.querySelectorAll('.bizcard');
    workcards = document.querySelectorAll('.work-card');
    logocards = document.querySelectorAll('.logo-card');
    initCardEvents();
    setBizCarouselPosition();
    setWorkCarouselPosition();
    setLogoCarouselPosition();
}

// File upload handlers
document.getElementById('adminUpload').addEventListener('change', function(e) {
    const files = e.target.files;
    
    if (files.length === 1) {
        const fileType = prompt('–ö—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?\n1 - –í–∏–∑–∏—Ç–∫–∏\n2 - –†–∞–±–æ—Ç—ã\n3 - –õ–æ–≥–æ—Ç–∏–ø—ã');
        
        if (fileType === '1') {
            addNewBizCard(files[0]);
        } else if (fileType === '2') {
            addNewWorkCard(files[0]);
        } else if (fileType === '3') {
            addNewLogo(files[0]);
        }
    } else if (files.length > 1) {
        const fileType = prompt(`–ö—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å ${files.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π?\n1 - –í–∏–∑–∏—Ç–∫–∏\n2 - –†–∞–±–æ—Ç—ã\n3 - –õ–æ–≥–æ—Ç–∏–ø—ã`);
        
        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            if (file.type.startsWith('image/')) {
                if (fileType === '1') {
                    addNewBizCard(file);
                } else if (fileType === '2') {
                    addNewWorkCard(file);
                } else if (fileType === '3') {
                    addNewLogo(file);
                }
            }
        }
    }
    
    e.target.value = '';
});

// About photo upload
document.getElementById('aboutPhotoUpload').addEventListener('change', async function(e) {
    const file = e.target.files[0];
    if (file && file.type.startsWith('image/')) {
        try {
            const imageUrl = await uploadImageLocal(file);
            document.querySelector('.about-photo img').src = imageUrl;
        } catch (error) {
            alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: ' + error.message);
        }
    }
});

// About photo click handler
document.getElementById('aboutPhoto').addEventListener('click', function() {
    if (isAdminMode) {
        document.getElementById('aboutPhotoUpload').click();
    }
});

async function addNewBizCard(file) {
    if (!file || !file.type.startsWith('image/')) {
        console.error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞');
        return;
    }
    
    try {
        const imageUrl = await uploadImageLocal(file);
        
        const newCard = document.createElement('div');
        newCard.className = 'bizcard';
        newCard.setAttribute('data-modal', `biz${nextCardId}`);
        
        const img = document.createElement('img');
        img.src = imageUrl;
        img.alt = `Business Card ${nextCardId}`;
        
        newCard.appendChild(img);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (isAdminMode) {
            newCard.addEventListener('click', function() {
                const input = document.createElement('input');
                input.type = 'file';
                input.accept = 'image/*';
                input.onchange = async function(e) {
                    const file = e.target.files[0];
                    if (file) {
                        try {
                            const newImageUrl = await uploadImageLocal(file);
                            img.src = newImageUrl;
                        } catch (error) {
                            alert('–û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ' + error.message);
                        }
                    }
                };
                input.click();
            });
        }
        
        const addCard = document.getElementById('addCard');
        addCard.parentNode.insertBefore(newCard, addCard);
        
        nextCardId++;
        updateCarousels();
        
        console.log('–ù–æ–≤–∞—è –≤–∏–∑–∏—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
    } catch (error) {
        alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–∑–∏—Ç–∫–∏: ' + error.message);
    }
}

async function addNewWorkCard(file) {
    if (!file || !file.type.startsWith('image/')) {
        console.error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞');
        return;
    }
    
    try {
        const imageUrl = await uploadImageLocal(file);
        
        const newCard = document.createElement('div');
        newCard.className = 'work-card tilt';
        
        const img = document.createElement('img');
        img.src = imageUrl;
        img.alt = `Work ${nextWorkId}`;
        
        const content = document.createElement('div');
        content.className = 'work-content';
        content.innerHTML = `
            <h3 class="work-title editable" contenteditable="${isAdminMode}">–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç</h3>
            <p class="work-description editable" contenteditable="${isAdminMode}">–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</p>
            <a href="#" class="work-btn">–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç</a>
        `;
        
        newCard.appendChild(img);
        newCard.appendChild(content);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (isAdminMode) {
            img.addEventListener('click', function(e) {
                e.stopPropagation();
                const input = document.createElement('input');
                input.type = 'file';
                input.accept = 'image/*';
                input.onchange = async function(event) {
                    const file = event.target.files[0];
                    if (file) {
                        try {
                            const newImageUrl = await uploadImageLocal(file);
                            img.src = newImageUrl;
                        } catch (error) {
                            alert('–û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ' + error.message);
                        }
                    }
                };
                input.click();
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
            const workBtn = content.querySelector('.work-btn');
            workBtn.addEventListener('click', handleWorkLinkEdit);
        }
        
        const addCard = document.getElementById('addWorkCard');
        addCard.parentNode.insertBefore(newCard, addCard);
        
        nextWorkId++;
        updateCarousels();
        
        console.log('–ù–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
    } catch (error) {
        alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã: ' + error.message);
    }
}

async function addNewLogo(file) {
    if (!file || !file.type.startsWith('image/')) {
        console.error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞');
        return;
    }
    
    try {
        const imageUrl = await uploadImageLocal(file);
        
        const newCard = document.createElement('div');
        newCard.className = 'logo-card';
        
        const imageDiv = document.createElement('div');
        imageDiv.className = 'logo-image';
        
        const img = document.createElement('img');
        img.src = imageUrl;
        img.alt = `Logo ${nextLogoId}`;
        
        const textDiv = document.createElement('div');
        textDiv.className = 'logo-text editable';
        textDiv.contentEditable = isAdminMode;
        textDiv.textContent = '–ù–æ–≤—ã–π –ª–æ–≥–æ—Ç–∏–ø';
        
        imageDiv.appendChild(img);
        newCard.appendChild(imageDiv);
        newCard.appendChild(textDiv);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (isAdminMode) {
            imageDiv.addEventListener('click', function() {
                const input = document.createElement('input');
                input.type = 'file';
                input.accept = 'image/*';
                input.onchange = async function(e) {
                    const file = e.target.files[0];
                    if (file) {
                        try {
                            const newImageUrl = await uploadImageLocal(file);
                            img.src = newImageUrl;
                        } catch (error) {
                            alert('–û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ' + error.message);
                        }
                    }
                };
                input.click();
            });
        }
        
        const addCard = document.getElementById('addLogoCard');
        addCard.parentNode.insertBefore(newCard, addCard);
        
        nextLogoId++;
        updateCarousels();
        
        console.log('–ù–æ–≤—ã–π –ª–æ–≥–æ—Ç–∏–ø –¥–æ–±–∞–≤–ª–µ–Ω!');
    } catch (error) {
        alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞: ' + error.message);
    }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫
function testAllLinks() {
    const workButtons = document.querySelectorAll('.work-btn');
    const validLinks = [];
    const emptyLinks = [];
    
    workButtons.forEach((btn, index) => {
        const href = btn.href;
        const projectTitle = btn.closest('.work-card').querySelector('.work-title').textContent;
        
        if (href && href !== '#' && href !== window.location.href + '#' && href !== window.location.href) {
            validLinks.push({ title: projectTitle, url: href, button: btn });
        } else {
            emptyLinks.push({ title: projectTitle, button: btn });
        }
    });
    
    let message = 'üîó –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫:\n\n';
    
    if (validLinks.length > 0) {
        message += `‚úÖ –ü—Ä–æ–µ–∫—Ç—ã —Å —Å—Å—ã–ª–∫–∞–º–∏ (${validLinks.length}):\n`;
        validLinks.forEach((item, index) => {
            message += `${index + 1}. ${item.title}\n   ‚Üí ${item.url}\n\n`;
        });
    }
    
    if (emptyLinks.length > 0) {
        message += `‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç—ã –±–µ–∑ —Å—Å—ã–ª–æ–∫ (${emptyLinks.length}):\n`;
        emptyLinks.forEach((item, index) => {
            message += `${index + 1}. ${item.title}\n`;
        });
        message += '\n';
    }
    
    if (validLinks.length > 0) {
        message += '–•–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏?';
        const openAll = confirm(message);
        
        if (openAll) {
            validLinks.forEach(item => {
                window.open(item.url, '_blank');
            });
        }
    } else {
        message += '–î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.';
        alert(message);
    }
}

// Add card button handlers
document.getElementById('addCard').addEventListener('click', function() {
    const input = document.getElementById('adminUpload');
    input.click();
});

document.getElementById('addWorkCard').addEventListener('click', function() {
    const input = document.getElementById('adminUpload');
    input.click();
});

document.getElementById('addLogoCard').addEventListener('click', function() {
    const input = document.getElementById('adminUpload');
    input.click();
});

// Marquee Animation
let marqueeOffset = 0;
const marquee = document.getElementById('marquee');

function animateMarquee() {
    marqueeOffset += 0.4;
    if (marqueeOffset >= marquee.scrollWidth / 2) {
        marqueeOffset = 0;
    }
    marquee.style.transform = `translateX(-${marqueeOffset}px)`;
    requestAnimationFrame(animateMarquee);
}

// Reveal Animation
const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.classList.add('in');
        }
    });
}, { threshold: 0.12 });

document.querySelectorAll('.reveal').forEach(el => {
    observer.observe(el);
});

// Tilt Effect
document.querySelectorAll('.tilt').forEach(el => {
    el.addEventListener('mousemove', (e) => {
        const rect = el.getBoundingClientRect();
        const x = e.clientX - rect.left - rect.width / 2;
        const y = e.clientY - rect.top - rect.height / 2;
        
        const rotateX = (y / rect.height) * -10;
        const rotateY = (x / rect.width) * 10;
        
        el.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;
    });
    
    el.addEventListener('mouseleave', () => {
        el.style.transform = 'perspective(1000px) rotateX(0deg) rotateY(0deg)';
    });
});

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ö–ê–†–£–°–ï–õ–¨ - –í–∏–∑–∏—Ç–∫–∏
const biztrack = document.getElementById('biztrack');
const prevBtn = document.getElementById('prevBtn');
const nextBtn = document.getElementById('nextBtn');
let bizcards = document.querySelectorAll('.bizcard');
let currentBizIndex = 0;

function setBizCarouselPosition() {
    if (bizcards.length === 0) return;
    
    const cardWidth = bizcards[0].offsetWidth;
    const gap = 20;
    const containerWidth = document.querySelector('.bizviewport').offsetWidth;
    
    const leftPadding = window.innerWidth <= 768 ? 16 : 24;
    const offset = currentBizIndex * (cardWidth + gap);
    
    biztrack.style.transform = `translateX(-${offset}px)`;
}

function clampBizIndex(index) {
    if (bizcards.length === 0) return 0;
    
    const cardWidth = bizcards[0].offsetWidth;
    const gap = 20;
    const containerWidth = document.querySelector('.bizviewport').offsetWidth;
    const leftPadding = window.innerWidth <= 768 ? 16 : 24;
    
    const totalCardsWidth = (cardWidth + gap) * bizcards.length - gap;
    const availableWidth = containerWidth - leftPadding;
    
    const maxSteps = Math.max(0, Math.ceil((totalCardsWidth - availableWidth) / (cardWidth + gap)));
    
    return Math.max(0, Math.min(index, maxSteps));
}

prevBtn.addEventListener('click', () => {
    currentBizIndex = clampBizIndex(currentBizIndex - 1);
    setBizCarouselPosition();
});

nextBtn.addEventListener('click', () => {
    currentBizIndex = clampBizIndex(currentBizIndex + 1);
    setBizCarouselPosition();
});

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ö–ê–†–£–°–ï–õ–¨ - –†–∞–±–æ—Ç—ã
const workstrack = document.getElementById('workstrack');
const prevWorkBtn = document.getElementById('prevWorkBtn');
const nextWorkBtn = document.getElementById('nextWorkBtn');
let workcards = document.querySelectorAll('.work-card');
let currentWorkIndex = 0;

function setWorkCarouselPosition() {
    if (workcards.length === 0) return;
    
    const cardWidth = workcards[0].offsetWidth;
    const gap = 20;
    const containerWidth = document.querySelector('.works-viewport').offsetWidth;
    
    const leftPadding = window.innerWidth <= 768 ? 16 : 24;
    const offset = currentWorkIndex * (cardWidth + gap);
    
    workstrack.style.transform = `translateX(-${offset}px)`;
}

function clampWorkIndex(index) {
    if (workcards.length === 0) return 0;
    
    const cardWidth = workcards[0].offsetWidth;
    const gap = 20;
    const containerWidth = document.querySelector('.works-viewport').offsetWidth;
    const leftPadding = window.innerWidth <= 768 ? 16 : 24;
    
    const totalCardsWidth = (cardWidth + gap) * workcards.length - gap;
    const availableWidth = containerWidth - leftPadding;
    
    const maxSteps = Math.max(0, Math.ceil((totalCardsWidth - availableWidth) / (cardWidth + gap)));
    
    return Math.max(0, Math.min(index, maxSteps));
}

prevWorkBtn.addEventListener('click', () => {
    currentWorkIndex = clampWorkIndex(currentWorkIndex - 1);
    setWorkCarouselPosition();
});

nextWorkBtn.addEventListener('click', () => {
    currentWorkIndex = clampWorkIndex(currentWorkIndex + 1);
    setWorkCarouselPosition();
});

// –ö–ê–†–£–°–ï–õ–¨ –õ–û–ì–û–¢–ò–ü–û–í
const logostrack = document.getElementById('logostrack');
const prevLogoBtn = document.getElementById('prevLogoBtn');
const nextLogoBtn = document.getElementById('nextLogoBtn');
let logocards = document.querySelectorAll('.logo-card');
let currentLogoIndex = 0;

function setLogoCarouselPosition() {
    if (logocards.length === 0) return;
    
    const cardWidth = logocards[0].offsetWidth;
    const gap = 20;
    const containerWidth = document.querySelector('.logos-viewport').offsetWidth;
    
    const leftPadding = window.innerWidth <= 768 ? 16 : 24;
    const offset = currentLogoIndex * (cardWidth + gap);
    
    logostrack.style.transform = `translateX(-${offset}px)`;
}

function clampLogoIndex(index) {
    if (logocards.length === 0) return 0;
    
    const cardWidth = logocards[0].offsetWidth;
    const gap = 20;
    const containerWidth = document.querySelector('.logos-viewport').offsetWidth;
    const leftPadding = window.innerWidth <= 768 ? 16 : 24;
    
    const totalCardsWidth = (cardWidth + gap) * logocards.length - gap;
    const availableWidth = containerWidth - leftPadding;
    
    const maxSteps = Math.max(0, Math.ceil((totalCardsWidth - availableWidth) / (cardWidth + gap)));
    
    return Math.max(0, Math.min(index, maxSteps));
}

prevLogoBtn.addEventListener('click', () => {
    currentLogoIndex = clampLogoIndex(currentLogoIndex - 1);
    setLogoCarouselPosition();
});

nextLogoBtn.addEventListener('click', () => {
    currentLogoIndex = clampLogoIndex(currentLogoIndex + 1);
    setLogoCarouselPosition();
});

// Modal Logic
const modal = document.getElementById('modal');
const modalImage = document.getElementById('modalImage');
const modalClose = document.getElementById('modalClose');

// Work Modal Logic
const workModal = document.getElementById('workModal');
const workModalImage = document.getElementById('workModalImage');
const workModalTitle = document.getElementById('workModalTitle');
const workModalDescription = document.getElementById('workModalDescription');
const workModalBtn = document.getElementById('workModalBtn');
const workModalClose = document.getElementById('workModalClose');

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
workModalBtn.addEventListener('click', function(e) {
    const href = this.href;
    console.log('–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤ –º–æ–¥–∞–ª–µ, href:', href);
    
    if (!href || href === '#' || href === window.location.href + '#' || href === window.location.href) {
        e.preventDefault();
        console.log('–ü—É—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞, –ø–µ—Ä–µ—Ö–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
        alert('‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç –Ω–µ –∑–∞–¥–∞–Ω–∞.\n\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏:\n1. –í–∫–ª—é—á–∏—Ç–µ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º\n2. –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç" –≤ –∫–∞—Ä—Ç–æ—á–∫–µ\n3. –í–≤–µ–¥–∏—Ç–µ URL –ø—Ä–æ–µ–∫—Ç–∞');
        return false;
    }
    
    console.log('–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ:', href);
    // –ï—Å–ª–∏ —ç—Ç–æ –≤–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞, –ø–æ–∑–≤–æ–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ—ë —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ
});

function initCardEvents() {
    const currentBizCards = document.querySelectorAll('.bizcard');
    const currentWorkCards = document.querySelectorAll('.work-card');
    const currentLogoCards = document.querySelectorAll('.logo-card');
    
    // –î–ª—è –≤–∏–∑–∏—Ç–æ–∫ —É–±–∏—Ä–∞–µ–º hover —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∏–∫ –Ω–∞ –º–æ–±–∏–ª–µ
    if (window.innerWidth <= 768) {
        currentBizCards.forEach(card => {
            card.removeEventListener('click', handleBizMobileClick);
            if (!isAdminMode) {
                card.addEventListener('click', handleBizMobileClick);
            }
        });
    }
    
    // –î–ª—è —Ä–∞–±–æ—Ç - —Ä–∞–∑–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    currentWorkCards.forEach(card => {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        card.removeEventListener('click', handleWorkClick);
        
        const workBtn = card.querySelector('.work-btn');
        if (workBtn) {
            workBtn.removeEventListener('click', handleWorkLinkEdit);
            
            if (isAdminMode) {
                // –í –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–µ: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫
                workBtn.addEventListener('click', handleWorkLinkEdit);
            } else {
                // –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ: –æ—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
                card.addEventListener('click', handleWorkClick);
                // –î–ª—è –∫–Ω–æ–ø–∫–∏ - –ø—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)
            }
        }
    });
    
    // –î–ª—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –≤ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–µ
    if (isAdminMode) {
        currentLogoCards.forEach(card => {
            const logoImage = card.querySelector('.logo-image');
            if (logoImage) {
                logoImage.removeEventListener('click', handleLogoImageClick);
                logoImage.addEventListener('click', handleLogoImageClick);
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–∏–∑–∏—Ç–æ–∫ –∏ —Ä–∞–±–æ—Ç
        currentBizCards.forEach(card => {
            card.removeEventListener('click', handleBizImageClick);
            card.addEventListener('click', handleBizImageClick);
        });
        
        currentWorkCards.forEach(card => {
            const img = card.querySelector('img');
            if (img) {
                img.removeEventListener('click', handleWorkImageClick);
                img.addEventListener('click', handleWorkImageClick);
            }
        });
    } else {
        // –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ —É–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        currentLogoCards.forEach(card => {
            const logoImage = card.querySelector('.logo-image');
            if (logoImage) {
                logoImage.removeEventListener('click', handleLogoImageClick);
            }
        });
        
        currentBizCards.forEach(card => {
            card.removeEventListener('click', handleBizImageClick);
        });
        
        currentWorkCards.forEach(card => {
            const img = card.querySelector('img');
            if (img) {
                img.removeEventListener('click', handleWorkImageClick);
            }
        });
    }
}

function handleWorkLinkEdit(e) {
    if (!isAdminMode) return;
    e.preventDefault();
    e.stopPropagation();
    
    const workBtn = e.currentTarget;
    const currentLink = workBtn.href;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
    const newLink = prompt(
        '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç:\n\n' +
        '–ü—Ä–∏–º–µ—Ä—ã:\n' +
        '‚Ä¢ https://example.com\n' +
        '‚Ä¢ https://github.com/user/project\n' +
        '‚Ä¢ https://behance.net/gallery/...\n\n' +
        '–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞:', 
        currentLink === window.location.href + '#' ? '' : currentLink
    );
    
    if (newLink !== null) { // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∞–ª "–û—Ç–º–µ–Ω–∞"
        if (newLink.trim() === '') {
            workBtn.href = '#';
            workBtn.removeAttribute('target');
            workBtn.removeAttribute('rel');
            console.log('–°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞');
        } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏
            try {
                const url = new URL(newLink.trim());
                workBtn.href = url.href;
                workBtn.target = '_blank'; // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
                workBtn.rel = 'noopener noreferrer'; // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
                console.log('–°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', url.href);
                
                // –ü—Ä–æ–≤–µ—Ä–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                const testNow = confirm(
                    '‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n' +
                    `URL: ${url.href}\n\n` +
                    '–•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?\n' +
                    '(–û—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ)'
                );
                
                if (testNow) {
                    window.open(url.href, '_blank');
                }
                
            } catch (error) {
                alert('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π URL —Å http:// –∏–ª–∏ https://\n\n–ü—Ä–∏–º–µ—Ä: https://example.com');
            }
        }
    }
}

function handleBizImageClick(e) {
    if (!isAdminMode) return;
    e.stopPropagation();
    
    const img = e.currentTarget.querySelector('img');
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = 'image/*';
    input.onchange = async function(event) {
        const file = event.target.files[0];
        if (file) {
            try {
                const newImageUrl = await uploadImageLocal(file);
                img.src = newImageUrl;
            } catch (error) {
                alert('–û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ' + error.message);
            }
        }
    };
    input.click();
}

function handleWorkImageClick(e) {
    if (!isAdminMode) return;
    e.stopPropagation();
    
    const img = e.currentTarget;
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = 'image/*';
    input.onchange = async function(event) {
        const file = event.target.files[0];
        if (file) {
            try {
                const newImageUrl = await uploadImageLocal(file);
                img.src = newImageUrl;
            } catch (error) {
                alert('–û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ' + error.message);
            }
        }
    };
    input.click();
}

function handleLogoImageClick(e) {
    e.stopPropagation();
    const logoImage = e.currentTarget;
    const img = logoImage.querySelector('img');
    
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = 'image/*';
    input.onchange = async function(event) {
        const file = event.target.files[0];
        if (file) {
            try {
                const newImageUrl = await uploadImageLocal(file);
                img.src = newImageUrl;
            } catch (error) {
                alert('–û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ' + error.message);
            }
        }
    };
    input.click();
}

function handleWorkClick(e) {
    if (isAdminMode) return; // –í –∞–¥–º–∏–Ω —Ä–µ–∂–∏–º–µ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª
    
    e.preventDefault();
    const workCard = e.currentTarget;
    const img = workCard.querySelector('img');
    const title = workCard.querySelector('.work-title');
    const description = workCard.querySelector('.work-description');
    const btn = workCard.querySelector('.work-btn');
    
    workModalImage.src = img.src;
    workModalImage.alt = img.alt;
    workModalTitle.textContent = title.textContent;
    workModalDescription.textContent = description.textContent;
    
    // –ö–æ–ø–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –∏ –∞—Ç—Ä–∏–±—É—Ç—ã
    const modalBtn = document.getElementById('workModalBtn');
    const btnHref = btn.href;
    
    console.log('–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏:', btnHref); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    
    modalBtn.href = btnHref;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ –≤–Ω–µ—à–Ω–µ–π
    if (btnHref && btnHref !== '#' && btnHref !== window.location.href + '#' && btnHref !== window.location.href) {
        modalBtn.target = '_blank';
        modalBtn.rel = 'noopener noreferrer';
        modalBtn.style.display = 'inline-block';
        console.log('–ö–Ω–æ–ø–∫–∞ –≤ –º–æ–¥–∞–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –≤–Ω–µ—à–Ω–µ–π —Å—Å—ã–ª–∫–∏:', btnHref); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    } else {
        modalBtn.target = '_self';
        modalBtn.removeAttribute('rel');
        modalBtn.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–µ—Ç
        console.log('–ö–Ω–æ–ø–∫–∞ –≤ –º–æ–¥–∞–ª–µ —Å–∫—Ä—ã—Ç–∞ - –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏'); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    }
    
    workModal.style.display = 'block';
}

function handleBizMobileClick(e) {
    if (isAdminMode) return; // –í –∞–¥–º–∏–Ω —Ä–µ–∂–∏–º–µ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª
    
    const img = e.currentTarget.querySelector('img');
    modalImage.src = img.src;
    modalImage.alt = img.alt;
    modal.style.display = 'block';
}

modalClose.addEventListener('click', () => {
    modal.style.display = 'none';
});

modal.addEventListener('click', (e) => {
    if (e.target === modal) {
        modal.style.display = 'none';
    }
});

workModalClose.addEventListener('click', () => {
    workModal.style.display = 'none';
});

workModal.addEventListener('click', (e) => {
    if (e.target === workModal) {
        workModal.style.display = 'none';
    }
});

// Form Submission
const contactForm = document.getElementById('contactForm');
const formStatus = document.getElementById('formStatus');
const GOOGLE_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbxYUaAiV0Vq8uvNPSVyawcCiHDV4N3HFr1TT4dmDTesQ42sBgHbiOQkdNAodil8DTDV/exec';

contactForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    formStatus.style.display = 'block';
    formStatus.className = 'form-status';
    formStatus.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
    
    const formData = new FormData(contactForm);
    const data = new URLSearchParams();
    
    for (let [key, value] of formData.entries()) {
        data.append(key, value);
    }
    
    try {
        const response = await fetch(GOOGLE_SCRIPT_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'
            },
            body: data,
            mode: 'no-cors'
        });
        
        formStatus.className = 'form-status success';
        formStatus.textContent = '–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.';
        contactForm.reset();
        
        setTimeout(() => {
            formStatus.style.display = 'none';
        }, 5000);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
        formStatus.className = 'form-status error';
        formStatus.textContent = '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ' + error.message;
        
        setTimeout(() => {
            formStatus.style.display = 'none';
        }, 8000);
    }
});

// Initialize
window.addEventListener('load', () => {
    loadSavedContent(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    animateMarquee();
    setBizCarouselPosition();
    setWorkCarouselPosition();
    setLogoCarouselPosition();
    initCardEvents();
    
    setTimeout(() => {
        setBizCarouselPosition();
        setWorkCarouselPosition();
        setLogoCarouselPosition();
    }, 100);
});

window.addEventListener('resize', () => {
    currentBizIndex = clampBizIndex(currentBizIndex);
    currentWorkIndex = clampWorkIndex(currentWorkIndex);
    currentLogoIndex = clampLogoIndex(currentLogoIndex);
    
    setBizCarouselPosition();
    setWorkCarouselPosition();
    setLogoCarouselPosition();
});

// Smooth scrolling
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    });
});
